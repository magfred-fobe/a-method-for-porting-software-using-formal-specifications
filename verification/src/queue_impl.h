//
// Created by Magnus on 3/31/21.
//
#pragma once

#include "queue.h"

struct IntegerSLISTEntry {
    int data;
    SLIST_ENTRY(IntegerSLISTEntry) entries;             /* Singly linked list */
};

SLIST_HEAD(mySinglyLinkedListHead, IntegerSLISTEntry);


struct IntegerSTAILQueueNode {
    int data;
    STAILQ_ENTRY(IntegerSTAILQueueNode) entries;
};

STAILQ_HEAD(mySTAILQueueHead, IntegerSTAILQueueNode);


LIST_HEAD(myLISTHead, IntegerLISTEntry);						\

struct IntegerLISTEntry {
    int data;
    LIST_ENTRY(IntegerLISTEntry) entries;
};

TAILQ_HEAD(myTAILQueueHead, IntegerTAILQueueNode);						\

struct IntegerTAILQueueNode {
    int data;
    TAILQ_ENTRY(IntegerTAILQueueNode) entries;
};


//When inlining the functions, no coverage was generated by gcov. Maybe solvable
//but it shouldn't affect functionality only performance.

//List
void SLIST_INIT_impl(mySinglyLinkedListHead*);
void SLIST_CONCAT_impl(mySinglyLinkedListHead* head1, mySinglyLinkedListHead* head2);
bool SLIST_EMPTY_impl(mySinglyLinkedListHead* head);
void SLIST_INSERT_AFTER_impl(IntegerSLISTEntry* slistelm, IntegerSLISTEntry* elm);
void SLIST_INSERT_HEAD_impl(mySinglyLinkedListHead* head,IntegerSLISTEntry* elm);
IntegerSLISTEntry* SLIST_NEXT_impl(IntegerSLISTEntry* elm);
void SLIST_REMOVE_impl(mySinglyLinkedListHead* head, IntegerSLISTEntry* elm);
void SLIST_REMOVE_AFTER_impl(IntegerSLISTEntry* elm);
void SLIST_REMOVE_HEAD_impl(mySinglyLinkedListHead* head);
void SLIST_REMOVE_PREVPTR_impl(IntegerSLISTEntry**, IntegerSLISTEntry*);
void SLIST_SWAP_impl(mySinglyLinkedListHead*,mySinglyLinkedListHead*);
IntegerSLISTEntry* SLIST_END_impl(mySinglyLinkedListHead*);
IntegerSLISTEntry* SLIST_FIRST_impl(mySinglyLinkedListHead* h);

//Singly Linked Tail Queue
mySTAILQueueHead STAILQ_HEAD_INITIALIZER_impl(mySTAILQueueHead* head);
void STAILQ_CONCAT_impl(mySTAILQueueHead* head1,mySTAILQueueHead* head2);
bool STAILQ_EMPTY_impl(mySTAILQueueHead *head);
IntegerSTAILQueueNode* STAILQ_FIRST_impl(mySTAILQueueHead *head);
void STAILQ_INIT_impl(mySTAILQueueHead* head);
void STAILQ_INSERT_AFTER_impl(mySTAILQueueHead* head, IntegerSTAILQueueNode* tqelm,IntegerSTAILQueueNode* elm);
void STAILQ_INSERT_HEAD_impl(mySTAILQueueHead* head,IntegerSTAILQueueNode* elm);
void STAILQ_INSERT_TAIL_impl(mySTAILQueueHead* head,IntegerSTAILQueueNode* elm);
IntegerSTAILQueueNode* STAILQ_LAST_impl(mySTAILQueueHead* head);
IntegerSTAILQueueNode* STAILQ_NEXT_impl(IntegerSTAILQueueNode* elm);
void STAILQ_REMOVE_impl(mySTAILQueueHead* head,IntegerSTAILQueueNode* elm);
void STAILQ_REMOVE_AFTER_impl(mySTAILQueueHead* head,IntegerSTAILQueueNode* elm);
void STAILQ_REMOVE_HEAD_impl(mySTAILQueueHead* head);
void STAILQ_SWAP_impl(mySTAILQueueHead* head1,mySTAILQueueHead* head2);
IntegerSTAILQueueNode* STAILQ_END_impl(mySTAILQueueHead* head);

//doubly linked list
void LIST_CONCAT_impl(myLISTHead* , myLISTHead*);
bool LIST_EMPTY_impl(myLISTHead*);
IntegerLISTEntry* LIST_FIRST_impl(myLISTHead*);
void LIST_INIT_impl(myLISTHead* );
void LIST_INSERT_AFTER_impl(IntegerLISTEntry*, IntegerLISTEntry*);
void LIST_INSERT_BEFORE_impl(IntegerLISTEntry* , IntegerLISTEntry*);
void LIST_INSERT_HEAD_impl(myLISTHead*,IntegerLISTEntry*);
IntegerLISTEntry* LIST_NEXT_impl(IntegerLISTEntry*);
IntegerLISTEntry* LIST_PREV_impl(IntegerLISTEntry*, myLISTHead*);
void LIST_REMOVE_impl(IntegerLISTEntry*);
void LIST_SWAP_impl(myLISTHead*, myLISTHead*);
IntegerLISTEntry* LIST_END_impl(myLISTHead*);

//TAILQ, double linked Tail Queue
void TAILQ_CONCAT_impl(myTAILQueueHead* ,myTAILQueueHead*);
bool TAILQ_EMPTY_impl(myTAILQueueHead*);
IntegerTAILQueueNode* TAILQ_FIRST_impl(myTAILQueueHead *);
void TAILQ_INIT_impl(myTAILQueueHead*);
void TAILQ_INSERT_AFTER_impl(myTAILQueueHead* ,IntegerTAILQueueNode* , IntegerTAILQueueNode*);
void TAILQ_INSERT_BEFORE_impl(IntegerTAILQueueNode*, IntegerTAILQueueNode*);
void TAILQ_INSERT_HEAD_impl(myTAILQueueHead* , IntegerTAILQueueNode*);
void TAILQ_INSERT_TAIL_impl(myTAILQueueHead* , IntegerTAILQueueNode*);
IntegerTAILQueueNode* TAILQ_LAST_impl(myTAILQueueHead*);
IntegerTAILQueueNode* TAILQ_LAST_FAST_impl(myTAILQueueHead*);
IntegerTAILQueueNode* TAILQ_NEXT_impl(IntegerTAILQueueNode*);
IntegerTAILQueueNode* TAILQ_PREV_impl(IntegerTAILQueueNode*);
IntegerTAILQueueNode* TAILQ_PREV_FAST_impl(IntegerTAILQueueNode*, myTAILQueueHead* );
void TAILQ_REMOVE_impl(myTAILQueueHead* , IntegerTAILQueueNode* );
void TAILQ_SWAP_impl(myTAILQueueHead* , myTAILQueueHead* );
IntegerTAILQueueNode* TAILQ_END_impl(myTAILQueueHead* head);

